<%- include('../partials/header.ejs'); %>
    <div id="chat-container">
      <div id="search-container">
        <input type="text"  placeholder="Search" />
       
         </div>
      <div id="conversation-list">
        <% data.forEach(function(conversation) { %>
         
          <% if(conversation.creator.id == loggedInUser.userid) { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')">
              <% if (conversation.participant.avatar) { %>
              <img src="<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>" />
              <% } else { %>
                <img src="https://placehold.co/200x200?text=<%= conversation.participant.name %>" />
              <% } %>
              <div class="title-text"><%= conversation.participant.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } else { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')">
              <% if (conversation.creator.avatar) { %>
              <img src="<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name %>" />
              <% } else { %>
                <img src="<%= conversation.participant.name %>" />
              <% } %>
              <div class="title-text"><%= conversation.creator.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
          <% } %>
        <% }); %>
        
        <!-- show no conversation placeholder image for 0 conversations -->
        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg"></div>
        <% } %>
      </div>
      

     <div class="new-message-container">
      <a href="#" onclick="openModal()" title="add conversation">+</a> <!-- First button -->
      <a href="/" ><i class="fa-solid fa-house" title="Home"></i></a> <!-- Second button -->
    </div>
      

      <div id="chat-title"  class="d-none">
        <span id="conversation-partner"></span>
        <img src="./images/trash.png" alt="Delete Conversation" onclick="deleteConversation()" />
      </div>

      <!-- placeholder div if no messages are in messages area -->
      <div id="chat-message-list">
        <div class="nothing">select a conversation</div>
      </div>

      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input type="text" name="message" placeholder="Type a message" autocomplete="off" />
        <button type="submit" style="background-color: aqua; padding: 5px;">Send</button>
      </form>

    </div>
    <%- include('../components/add-conversation-modal.ejs'); %>

    <!-- import socket io client from cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

    <script>

      const form = document.querySelector('#chat-form');
      const messageContainer = document.querySelector('#chat-message-list');
      const chatTitleContainer = document.querySelector('#conversation-partner');
      const loggedinUserId = '<%= loggedInUser.userid %>';
      const loggedinname = '<%= loggedInUser.name %>';
      let participant = null; // selected conversation participant object
      let current_conversation_id; // selected conversation id

      // socket initialization
      const socket = io("http://127.0.0.1:5000");

      // handle new/live incoming message from socket
      socket.on("new_message", data => {
        // only respond if current conversation is open in any client
        if(data.message.conversation_id == current_conversation_id) {
          // message class
          const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
          const senderAvatar = data.message.sender.avatar ? `<img src="${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img class="message-avatar" src="https://placehold.co/200x200?text=${data.message.sender.name}" alt="${data.message.sender.name}" />`;
          // message attachments
         let attachments = '<div class="attachments">';
          const { attachment, id } = data.message || {};
          // If attachment exists
          if (attachment) {
              if (Array.isArray(attachment)) {
                  attachments += attachment.map((att, index) => 
                      `<a href="./${att}" data-lightbox="message-${id}" data-title="Attachment ${index + 1}">
                          <img src="./${att}" alt="Attachment ${index + 1}" />
                      </a>`
                  ).join('');
              } else {
                  attachments += `<a href="./${attachment}" data-lightbox="message-${id}" data-title="Attachment">
                                      <img src="./${attachment}" alt="Attachment" />
                                  </a>`;
              }
          }
          attachments += '</div>';
          let messageHTML;
          // do not show avatar for loggedin user
          const messageText = data.message.message ? `<div class="message-text">${data.message.message}</div>` : "";
          if(data.message.sender.id == loggedinUserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${messageText}
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              ${messageText}
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          }

          // append the inoming message to message area as last item
          document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
        }
      });

      // get messages of a conversation
      async function getMessages(conversation_id, current_conversation_name){

        // messages failure toast
        const messagesFailureToast = Toastify({
          text: "Error loading messages!",
          duration: 1000,
        });

        let tareget = document.getElementById('chat-title');
        tareget.classList.remove('d-none');



        let response = await fetch(`/inbox/messages/${conversation_id}`);
        const result= await response.json();

        if(!result.errors && result.data) {
            form.style.visibility = 'visible';
            
            const {data, user, conversation_id} = result;

            participant = data.participant;
            current_conversation_id = conversation_id;

            if(data.messages) {

              let allMessages = '';

              if(data.messages.length > 0) {
                data.messages.forEach((message,index) => {
                  let senderAvatar = message.sender.avatar ? `./${message.sender.avatar}` : `https://placehold.co/200x200?text=${message.sender.name}`;
                  const messageClass = message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
                  const showAvatar = message.sender.id === loggedinUserId ? '' : ` <img  class="message-avatar" src="${senderAvatar}" alt="${message.sender.name}" />`;

                  // message attachments
                  let attachments = '<div class="attachments">';

                  if(message?.attachment && message.attachment?.length > 0) {
                    message.attachment.forEach(attachment => {
                     attachments += `<a href="./${attachment}" data-lightbox="message-${message.id}" data-title="Attachment ${index + 1}">
                                <img src="./${attachment}" alt="Attachment ${index + 1}" />
                            </a>`;
                    });
                  }

                  attachments += '</div>';
                      const messageText = message.text ? `<div class="message-text">${message.text}</div>` : "";
                  // final message html
                  let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      ${messageText}
                      ${attachments}
                      <div class="message-time">${moment(message.date_time).fromNow()}</div>
                    </div></div>`;

                  allMessages += messageHTML;
                  messageContainer.innerHTML = allMessages;
                });
              } else if(data.messages.length === 0) {
                messageContainer.innerHTML = '<div class="message-row"></div>';
              }

              chatTitleContainer.textContent = current_conversation_name;
            }
        } else {
          messagesFailureToast.showToast();
        }
    }
      // message sending
      form.onsubmit = async function (event) {
        event.preventDefault();
        // messages failure toast
        const sendMessageFailureToast = (message) => Toastify({
          text: message,
          duration: 1000,
        }).showToast();
        // prepare the form data
        const formData = new FormData(form);
        formData.append('receiverId', participant.id);
        formData.append('receiverName', participant.name);
        formData.append('avatar', participant.avatar || '');
        formData.append('conversationId', current_conversation_id);
        // send the request to server
        let response = await fetch("/inbox/message", {
          method: "POST",
          body: formData,
        });
        // get response
        let result = await response.json();
        if (!result.errors) {
          form.reset(); // reset the form
        } else {
          sendMessageFailureToast(result.errors.common.msg);
        }
      }
      


      function deleteConversation() {
        let conf = confirm("Are you sure you want to delete this conversation?");
        if (!conf) return;
        fetch(`/inbox/delete/${current_conversation_id}`, {
          method: "DELETE",
        });
        window.location.reload();
      }
    </script>
  </body>
</html>
